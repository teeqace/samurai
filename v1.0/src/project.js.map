{"version":3,"sources":["assets/scripts/Effects/BossDamage.js","assets/scripts/core/DisplayStats.js","assets/scripts/Effects/Effects.js","assets/scripts/Enemy/Enemies.js","assets/scripts/Enemy/Enemy.js","assets/scripts/Game.js","assets/scripts/BG/Husuma.js","assets/scripts/Katana/KatanaStreak.js","assets/scripts/Katana/KatanaTouch.js","assets/scripts/Katana/Katana.js","assets/scripts/Koban.js","assets/scripts/core/MessagePipeline.js","assets/scripts/Mochi.js","assets/scripts/core/PhysicsEnabler.js","assets/scripts/core/PrefabNodePool.js","assets/scripts/Player/Singitai.js","assets/scripts/StageCount.js","assets/scripts/core/ZIndex.js","assets/scripts/Effects/Zan.js"],"names":["cc","Class","extends","Component","properties","damageCount","Label","anim","Animation","onLoad","this","on","_finished","reuse","count","string","play","_backToPool","setPool","pool","_pool","put","node","displayStats","director","setDisplayStats","require","Effects","zanPrefab","Prefab","bossDamagePrefab","ichigekiAnim","statics","instance","zanPool","_PrefabNodePool2","default","bossDamagePool","dispZan","pos","zan","get","parent","x","Math","max","min","y","position","dispBossDamage","bossDamage","dispIchigeki","exports","_MessagePipeline","ENEMY_POS","Vec2","BOSS_TYPE","isBoss","life","attack","spriteIndex","spriteW","spriteH","colliderW","colliderH","enemyPrefab","_bossType","enemyPool","messagePipeline","_onCreateNewRoom","_onEnemyAttackStart","_Game2","stageCount","posIndexes","i","posIndex","floor","random","length","indexOf","spawn","push","spawnBoss","enemy","children","forEach","element","getComponent","attackAction","sendMessage","enemySprites","type","SpriteFrame","collider","BoxCollider","enemySprite","Sprite","_anim","data","killed","opacity","setScale","lifeMax","spriteFrame","width","height","update","dt","_timerStart","_timer","onEnemyAttack","onCollisionEnter","other","self","group","_katanaPos","onCollisionStay","onCollisionExit","_Effects2","Game","enemyNode","Node","_onEnemyDie","_onSlashEnd","_onEnemyAttackEnd","_onEnemyAttack","_roomEnd","playerTurn","_enemyCountAtOneSlash","_isIchigeki","_KatanaTouch2","slashTimes","_Singitai2","indecreaseGi","event","slashEndPosition","getUserData","_Koban2","add","playerTurnStart","_StageCount2","disp","damage","indecreaseTai","isFront","_animFinished","zIndex","_onMoveNextRoom","comesOut","comesIn","detail","name","target","_this","streak","MotionStreak","deleteAction","sequence","delayTime","callFunc","katana","isEnd","reset","unuse","lateUpdate","slashEnd","runAction","slashEndImmediately","KatanaTouch","_Katana2","_onTouchBegan","location","getLocation","_katanaMove","slash","EventType","TOUCH_MOVE","_onTouchMove","_touched","_finishTouch","off","_onTouchEnded","_onTouchCancel","_registerEvent","onDestroy","_unregisterEvent","TOUCH_START","TOUCH_END","TOUCH_CANCEL","canvasLocation","convertToNodeSpaceAR","setSin","emit","streakPrefab","streakPool","Koban","kobanLabel","_koban","value","MessagePipeline","_cc$EventTarget","EventTarget","params","log","nextLevel","currentSize","currentLevel","black","_onReset","anim1","scaling","anim2","coloring","eat","size","scaleTo","blacken","color","tintTo","enabledDebugDraw","enabledDrawBoundingBox","getPhysicsManager","enabled","collisionManager","getCollisionManager","PrefabNodePool","_cc$NodePool","prefab","capacity","increase","handler","_classCallCheck","_possibleConstructorReturn","__proto__","Object","getPrototypeOf","call","_handler","_prefab","_capacity","_increase","_peak","_toBePutBackToPool","NodePool","_createNode","_get","prototype","instantiate","poolHandler","param","countInUse","Singitai","gaugeSinFill","gaugeGiFill","gaugeTaiFill","_sin","_gi","_tai","getSin","getGi","getTai","indecreaseSin","ratio","fillRange","setGaugeFill","gauge","StageCount","stageLabel","zanCount"],"mappings":"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","sourcesContent":["cc.Class({\n  extends: cc.Component,\n\n  properties: {\n    damageCount: cc.Label,\n    anim: cc.Animation\n  },\n\n  // use this for initialization\n  onLoad: function () {\n    this.anim.on('finished', this._finished, this);\n  },\n  \n  reuse(count) {\n    this.damageCount.string = count;\n    this.anim.play();\n  },\n\n  _finished() {\n    this._backToPool();\n  },\n\n  setPool(pool) {\n    this._pool = pool;\n  },\n\n  _backToPool(){\n    if (this._pool) {\n      this._pool.put(this.node);\n    }\n  }\n\n  // called every frame, uncomment this function to activate update callback\n  // update: function (dt) {\n\n  // },\n});\n","cc.Class({\n  extends: cc.Component,\n\n  properties: {\n    displayStats: true\n  },\n\n  // use this for initialization\n  onLoad: function () {\n    cc.director.setDisplayStats(this.displayStats)\n  }\n})\n","import PrefabNodePool from '../core/PrefabNodePool';\n\nconst Effects = cc.Class({\n  extends: cc.Component,\n\n  properties: {\n    zanPrefab: cc.Prefab,\n    bossDamagePrefab: cc.Prefab,\n    ichigekiAnim: cc.Animation\n  },\n  \n  statics: {\n    instance: null,\n  },\n\n  // use this for initialization\n  onLoad: function () {\n    Effects.instance = this;\n    this.zanPool = new PrefabNodePool(this.zanPrefab, 5, 5, 'Zan');\n    this.bossDamagePool = new PrefabNodePool(this.bossDamagePrefab, 10, 10, 'BossDamage');\n  },\n\n  dispZan(pos, count) {\n    let zan = this.zanPool.get(count);\n    zan.parent = this.node;\n\n    pos.x = Math.max(-160, Math.min(160, pos.x));\n    pos.y = Math.max(-160, Math.min(160, pos.y));\n    zan.position = pos;\n  },\n  \n  dispBossDamage(pos, count) {\n    let bossDamage = this.bossDamagePool.get(count);\n    bossDamage.parent = this.node;\n\n    bossDamage.x = Math.max(-160, Math.min(160, pos.x));\n    bossDamage.y = Math.max(-160, Math.min(160, pos.y));\n    bossDamage.position = pos;\n  },\n\n  dispIchigeki() {\n    this.ichigekiAnim.play();\n  }\n\n  // called every frame, uncomment this function to activate update callback\n  // update: function (dt) {\n\n  // },\n});\n\nexport default Effects;\n","import PrefabNodePool from '../core/PrefabNodePool';\nimport { messagePipeline } from '../core/MessagePipeline';\nimport Game from '../Game';\n\nconst ENEMY_POS = [\n  new cc.Vec2(-160, -140),\n  new cc.Vec2(0, -140),\n  new cc.Vec2(160, -140),\n\n  new cc.Vec2(-80, -70),\n  new cc.Vec2(80, -70),\n\n  new cc.Vec2(-160, 0),\n  new cc.Vec2(0, 0),\n  new cc.Vec2(160, 0),\n\n  new cc.Vec2(-80, 70),\n  new cc.Vec2(80, 70),\n\n  new cc.Vec2(-160, 140),\n  new cc.Vec2(0, 140),\n  new cc.Vec2(160, 140),\n];\n\nconst BG_COLORS = [\n  '#44BCFF',\n  '#4462FF',\n  '#8F44FF',\n  '#E144FF',\n  '#FF448F',\n  '#FF4444',\n  '#FF7144',\n  '#FFAD44',\n  '#FFE144',\n  '#E9FF44',\n  '#C3FF44',\n  '#78FF44',\n  '#44FF8F',\n  '#44FFE9'\n];\n\nconst BOSS_TYPE = [\n  {\n    isBoss: true,\n    life: 10,\n    attack: 2,\n    spriteIndex: 1,\n    spriteW: 130,\n    spriteH: 180,\n    colliderW: 80,\n    colliderH: 150\n  },\n  {\n    isBoss: true,\n    life: 15,\n    attack: 3,\n    spriteIndex: 2,\n    spriteW: 150,\n    spriteH: 250,\n    colliderW: 120,\n    colliderH: 200\n  },\n  {\n    isBoss: true,\n    life: 20,\n    attack: 4,\n    spriteIndex: 3,\n    spriteW: 250,\n    spriteH: 350,\n    colliderW: 200,\n    colliderH: 280\n  }\n];\n\ncc.Class({\n  extends: cc.Component,\n\n  properties: {\n    enemyPrefab: cc.Prefab\n  },\n\n  // use this for initialization\n  onLoad: function () {\n    this._bossType = 0;\n    this.enemyPool = new PrefabNodePool(this.enemyPrefab, 10, 10, 'Enemy');\n\n    messagePipeline.on('onCreateNewRoom', this._onCreateNewRoom, this);\n    messagePipeline.on('onEnemyAttackStart', this._onEnemyAttackStart, this);\n  },\n\n  _onCreateNewRoom() {\n    // let eAmount = Math.floor(Math.random() * 3 + 3);\n    // let eAmount = Math.floor(Math.random() * 2 + 3);\n    if (Game.instance.stageCount % 5 !== 0) {\n      let eAmount = 6;\n      let posIndexes = [];\n      for (let i = 0; i < eAmount; i++) {\n        let posIndex = Math.floor(Math.random() * ENEMY_POS.length);\n        while (posIndexes.indexOf(posIndex) >= 0) {\n          posIndex = Math.floor(Math.random() * ENEMY_POS.length);\n        }\n        this.spawn(posIndex);\n        posIndexes.push(posIndex);\n      }\n    } else {\n      this.spawnBoss();\n      this._bossType = (this._bossType + 1) % BOSS_TYPE.length;\n    }\n  },\n\n  spawn(posIndex) {\n    let enemy = this.enemyPool.get({\n      isBoss: false,\n      life: 1,\n      attack: 1,\n      spriteIndex: 0,\n      spriteW: 90,\n      spriteH: 110,\n      colliderW: 80,\n      colliderH: 90\n    });\n    enemy.parent = this.node;\n    enemy.position = ENEMY_POS[posIndex];\n  },\n\n  spawnBoss() {\n    let enemy = this.enemyPool.get(BOSS_TYPE[this._bossType]);\n    enemy.parent = this.node;\n    enemy.position = new cc.Vec2(0, 0);\n  },\n\n  _onEnemyAttackStart() {\n    if (this.node.children.length === 0) {\n      messagePipeline.sendMessage('onRoomEnd', this);\n      return;\n    } else {\n      this.node.children.forEach(function(element) {\n        let enemy = element.getComponent('Enemy');\n        enemy.getComponent('Enemy').attackAction();\n      }, this);\n    }\n  }\n\n  // called every frame, uncomment this function to activate update callback\n  // update: function (dt) {\n\n  // },\n});\n","import { messagePipeline } from '../core/MessagePipeline';\nimport KatanaTouch from '../Katana/KatanaTouch';\nimport Effects from '../Effects/Effects';\n\ncc.Class({\n  extends: cc.Component,\n\n  properties: {\n    enemySprites: {\n      default: [],\n      type: [cc.SpriteFrame]\n    },\n    collider: cc.BoxCollider,\n    enemySprite: cc.Sprite,\n    isBoss: false,\n    life: 1,\n    attack: 1\n  },\n\n  // use this for initialization\n  onLoad: function () {\n    this._anim = this.node.getComponent(cc.Animation);\n    this._anim.on('finished', this._finished, this);\n  },\n\n  reuse(data) {\n    this.killed = false;\n    this.node.opacity = 255;\n    this.node.setScale(1);\n    this.isBoss = data.isBoss;\n    this.lifeMax = data.life;\n    this.life = data.life;\n    this.attack = data.attack;\n    this.enemySprite.spriteFrame = this.enemySprites[data.spriteIndex];\n    this.node.width = data.spriteW;\n    this.node.height = data.spriteH;\n    this.collider.width = data.colliderW;\n    this.collider.height = data.colliderH;\n  },\n  \n  // called every frame, uncomment this function to activate update callback\n  update: function (dt) {\n    if (!this._timerStart) {\n      return;\n    }\n    this._timer += dt;\n    // this.node.zIndex = 50;\n  },\n\n  attackAction() {\n    if (this.killed) {\n      return;\n    }\n    if (this.isBoss) {\n      this._anim.play('BossAttack');\n    } else {\n      this._anim.play('EnemyAttack');\n    }\n  },\n  \n  _finished() {\n    if (this.killed) {\n      this._backToPool();\n      messagePipeline.sendMessage('onEnemyDie', this);\n    }\n    if (!this.killed) {\n      if (!this.isBoss) {\n        this._backToPool();\n      }\n      messagePipeline.sendMessage('onEnemyAttackEnd');\n    }\n  },\n\n  onEnemyAttack() {\n    messagePipeline.sendMessage('onEnemyAttack', this.attack);\n  },\n  \n  setPool(pool) {\n    this._pool = pool;\n  },\n  \n  _backToPool(){\n    if (this._pool) {\n      this._pool.put(this.node);\n    }\n  },\n\n  onCollisionEnter(other, self) {\n    // let a = other.node.group;\n    if (other.node.group === 'katana') {\n      this._timer = 0;\n      this._timerStart = true;\n      this._katanaPos = other.node.position;\n    }\n  },\n\n  onCollisionStay(other, self) {\n    // let a = other.node.group;\n    if (this._timer >= 1.0) {\n      // this.node.destroy();\n    }\n  },\n\n  onCollisionExit(other, self) {\n    // let a = other.node.group;\n    if (other.node.group === 'katana') {\n      this._timerStart = false;\n      if (this._timer <= 0.2) {\n        this.life -= 1;\n        if (this.isBoss) {\n          Effects.instance.dispBossDamage(this._katanaPos, this.lifeMax - this.life);\n        }\n        if (this.life <= 0) {\n          this.killed = true;\n          this._anim.play('EnemyDamage');\n          // this._backToPool();\n        }\n      }\n    }\n  },\n});\n","import { messagePipeline } from './core/MessagePipeline'\nimport KatanaTouch from './Katana/KatanaTouch';\nimport Effects from './Effects/Effects';\nimport Koban from './Koban';\nimport StageCount from './StageCount';\nimport Singitai from './Player/Singitai';\n\nconst Game = cc.Class({\n  extends: cc.Component,\n\n  properties: {\n    enemyNode: cc.Node\n  },\n  \n  statics: {\n    instance: null,\n  },\n\n  // use this for initialization\n  onLoad: function () {\n    Game.instance = this;\n    messagePipeline.on('onEnemyDie', this._onEnemyDie, this);\n    messagePipeline.on('onSlashEnd', this._onSlashEnd, this);\n    messagePipeline.on('onEnemyAttackEnd', this._onEnemyAttackEnd, this);\n    messagePipeline.on('onEnemyAttack', this._onEnemyAttack, this);\n    messagePipeline.on('onRoomEnd', this._roomEnd, this);\n    this.playerTurn = false;\n    this._enemyCountAtOneSlash = 0;\n    this._isIchigeki = false;\n    this.stageCount = 1;\n  },\n\n  _onEnemyDie() {\n    this._isIchigeki = false;\n    if (this.enemyNode.children.length === 0) {\n      if (KatanaTouch.instance.slashTimes === 1) {\n        messagePipeline.sendMessage('onPerfectBonus', this);\n        // if (this._isIchigeki) {\n          this._isIchigeki = true;\n          Effects.instance.dispIchigeki();\n          Singitai.instance.indecreaseGi(10);\n          this._roomEnd();\n        // }\n      }\n    }\n    this._enemyCountAtOneSlash += 1;\n  },\n\n  _onSlashEnd(event) {\n    let slashEndPosition = event.getUserData();\n    if (!this._isIchigeki) {\n      if (this.stageCount % 5 !== 0) {\n        Effects.instance.dispZan(slashEndPosition, this._enemyCountAtOneSlash);\n      }\n    }\n    Koban.instance.add(this._enemyCountAtOneSlash);\n    this._enemyCountAtOneSlash = 0;\n    this.playerTurn = false;\n\n    // setTimeout(() => {\n      messagePipeline.sendMessage('onEnemyAttackStart', this);\n    // }, 0.1);\n  },\n\n  _onEnemyAttackEnd() {\n    if (!this.playerTurn) {\n      this.playerTurnStart();\n    }\n    if (this.enemyNode.children.length === 0) {\n      this._roomEnd();\n    }\n  },\n\n  _roomEnd() {\n    messagePipeline.sendMessage('onMoveNextRoom', this);\n    this.stageCount += 1;\n    StageCount.instance.disp(this.stageCount);\n\n\n    this.playerTurnStart();\n  },\n  \n  playerTurnStart() {\n    this._isIchigeki = false;\n    this.playerTurn = true;\n    KatanaTouch.instance.playerTurnStart();\n  },\n\n  _onEnemyAttack(event) {\n    let damage = event.getUserData();\n    Singitai.instance.indecreaseTai(-damage);\n  }\n\n  \n\n  // called every frame, uncomment this function to activate update callback\n  // update: function (dt) {\n\n  // },\n});\n\nexport default Game;","import { messagePipeline } from '../core/MessagePipeline'\nimport Game from '../Game';\n\nconst Z_FRONT = 100;\nconst Z_BACK = 10;\n\ncc.Class({\n  extends: cc.Component,\n\n  properties: {\n    isFront: true\n  },\n\n  // use this for initialization\n  onLoad: function () {\n    // this.node.zIndex = this.zIndex;\n    this._anim = this.node.getComponent(cc.Animation);\n    this._anim.on('finished', this._animFinished, this);\n\n    if (this.isFront) {\n      this.node.zIndex = Z_FRONT;\n      this._anim.play('HusumaComesOut');\n    } else {\n      this.node.zIndex = Z_BACK;\n      this._anim.play('HusumaComesIn');\n    }\n    this.isFront != this.isFront;\n\n    messagePipeline.on('onMoveNextRoom', this._onMoveNextRoom, this);\n    // test\n    // if (this.zIndex === 100) {\n    //   this._anim.play('HusumaComesOut');\n    // } else {\n    //   this._anim.play('HusumaComesIn');\n    // }\n    // this._testtime = 0;\n\n  },\n\n  // called every frame, uncomment this function to activate update callback\n  update: function (dt) {\n    // this.node.zIndex = this.zIndex;\n\n\n    // test\n    // this._testtime += dt;\n    // if (this._testtime >= 3) {\n    //   this._testtime = 0;\n    //   if (this.zIndex === 100) {\n    //     this._anim.play('HusumaComesOut');\n    //   } else {\n    //     this._anim.play('HusumaComesIn');\n    //   }\n    // }\n  },\n\n  _onMoveNextRoom() {\n    if (this.isFront) {\n      this._anim.play('HusumaComesOut');\n    } else {\n      this._anim.play('HusumaComesIn');\n    }\n    this.isFront != this.isFront;\n  },\n\n  comesOut() {\n    this.node.zIndex = Z_BACK;\n  },\n  \n  comesIn() {\n    this.node.zIndex = Z_FRONT;\n    messagePipeline.sendMessage('onCreateNewRoom', this);\n  },\n\n  _animFinished(event) {\n    if (event.detail.name === 'HusumaComesIn') {\n      Game.instance.playerTurnStart();\n    }\n\n  }\n});\n","cc.Class({\n  extends: cc.Component,\n\n  properties: {\n    target: cc.Node\n  },\n\n  // use this for initialization\n  onLoad() {\n    this.streak = this.node.getComponent(cc.MotionStreak);\n    this.deleteAction = cc.sequence(cc.delayTime(2), cc.callFunc(()=>{\n      // cc.log('ss-real-end');\n      if (this.node.parent) {\n        this._backToPool();\n      }\n    }, this));\n\n  },\n\n  reuse(katana) {\n    this.target = katana;\n    this.isEnd = false;\n    if (this.streak) {\n      this.streak.reset();\n    }\n  },\n\n  unuse() {\n  },\n\n  lateUpdate(dt) {\n    if (this.isEnd) {\n      return;\n    }\n    this.node.position = this.target.position;\n  },\n\n  setPool(pool) {\n    this._pool = pool;\n  },\n\n  slashEnd() {\n    // cc.log('ss-end');\n    this.isEnd = true;\n    this.node.runAction(this.deleteAction);\n  },\n\n  slashEndImmediately() {\n    this.streak.reset();\n  },\n  \n  _backToPool(){\n    if (this._pool) {\n      this._pool.put(this.node);\n    }\n  }\n});\n","import { messagePipeline } from '../core/MessagePipeline'\nimport Katana from './Katana';\nimport Singitai from '../Player/Singitai';\nimport Game from '../Game';\n\nconst KATANA_TIME = 1.00;\n\nconst KatanaTouch = cc.Class({\n  extends: cc.Component,\n\n  properties: {\n    katana: Katana\n  },\n  \n  statics: {\n    instance: null,\n  },\n\n  _onTouchBegan(event) {\n    // if (Singitai.instance.getTai() < 20) {\n    //   return;\n    // }\n    if (!Game.instance.playerTurn) {\n      return;\n    }\n    let location = event.getLocation()\n    // cc.log('_onTouchBegan')\n    // cc.log(location)\n    this.katana.node.setScale(1);\n    this._katanaMove(location);\n    this.katana.slash();\n    this.slashTimes += 1;\n\n    this.node.on(cc.Node.EventType.TOUCH_MOVE, this._onTouchMove, this)\n    this._touched = true\n  },\n\n  _finishTouch(event) {\n    if (!this._touched) {\n      return\n    }\n    this.node.off(cc.Node.EventType.TOUCH_MOVE, this._onTouchMove, this)\n    this._touched = false\n\n    this.katana.slashEnd();\n    this.katana.node.setScale(0);\n  },\n\n  _onTouchEnded(event) {\n    this._finishTouch(event)\n    // cc.log('_onTouchEnded')\n  },\n\n  _onTouchCancel(event) {\n    this._finishTouch(event)\n    // cc.log('_onTouchCancel')\n  },\n\n  _onTouchMove(event) {\n    let location = event.getLocation()\n    this._katanaMove(location)\n    // cc.log(location)\n  },\n\n  // use this for initialization\n  onLoad() {\n    KatanaTouch.instance = this;\n\n    this._touched = false\n    this._timer = KATANA_TIME;\n    messagePipeline.on('onCreateNewRoom', this._onCreateNewRoom, this);\n    this._registerEvent()\n  },\n\n  onDestroy() {\n    this._unregisterEvent()\n  },\n\n  _registerEvent() {\n    this.node.on(cc.Node.EventType.TOUCH_START, this._onTouchBegan, this)\n    this.node.on(cc.Node.EventType.TOUCH_END, this._onTouchEnded, this)\n    this.node.on(cc.Node.EventType.TOUCH_CANCEL, this._onTouchCancel, this)\n  },\n\n  _unregisterEvent() {\n    this.node.off(cc.Node.EventType.TOUCH_START, this._onTouchBegan, this)\n    this.node.off(cc.Node.EventType.TOUCH_END, this._onTouchEnded, this)\n    this.node.off(cc.Node.EventType.TOUCH_CANCEL, this._onTouchCancel, this)\n  },\n\n  _katanaMove(location) {\n    let canvasLocation = this.node.parent.convertToNodeSpaceAR(location)\n    // cc.log(canvasLocation)\n    this.katana.node.position = canvasLocation\n  },\n\n  _onCreateNewRoom() {\n    this.slashTimes = 0;\n    this._timer = KATANA_TIME;\n    Singitai.instance.setSin(1);\n    this.node.emit(cc.Node.EventType.TOUCH_CANCEL);\n  },\n\n  playerTurnStart() {\n    this.slashTimes = 0;\n    this._timer = KATANA_TIME;\n    Singitai.instance.setSin(1);\n  },\n\n  update(dt) {\n    if (!this._touched) {\n      return;\n    }\n    this._timer = Math.max(0, this._timer - dt);\n    Singitai.instance.setSin(this._timer / KATANA_TIME);\n    if (this._timer <= 0) {\n      this.node.emit(cc.Node.EventType.TOUCH_CANCEL);\n    }\n  }\n\n});\n\nexport default KatanaTouch;","import PrefabNodePool from '../core/PrefabNodePool';\nimport { messagePipeline } from '../core/MessagePipeline'\n\ncc.Class({\n  extends: cc.Component,\n\n  properties: {\n    streakPrefab: cc.Prefab\n  },\n\n  // use this for initialization\n  onLoad: function () {\n    this.streakPool = new PrefabNodePool(this.streakPrefab, 5, 5, 'KatanaStreak');\n    messagePipeline.on('onCreateNewRoom', this._onCreateNewRoom, this);\n  },\n\n  // called every frame, uncomment this function to activate update callback\n  // update: function (dt) {\n\n  // },\n  slash() {\n    this.streak = this.streakPool.get(this.node);\n    this.streak.parent = this.node.parent;\n    this.streak.position = this.node.position;\n  },\n\n  slashEnd() {\n    if (this.streak) {\n      this.streak.getComponent('KatanaStreak').slashEnd();\n    }\n    messagePipeline.sendMessage('onSlashEnd', this.node.position);\n  },\n\n  _onCreateNewRoom() {\n    if (this.streak) {\n      this.streak.getComponent('KatanaStreak').slashEndImmediately();\n    }\n  }\n});\n","const Koban = cc.Class({\n  extends: cc.Component,\n\n  properties: {\n    kobanLabel: cc.Label\n  },\n  \n  statics: {\n    instance: null,\n  },\n\n  // use this for initialization\n  onLoad: function () {\n    Koban.instance = this;\n    this._koban = 0;\n    this.add(0);\n  },\n\n  add(value) {\n    this._koban += value;\n    this.kobanLabel.string = this._koban;\n  }\n\n  // called every frame, uncomment this function to activate update callback\n  // update: function (dt) {\n\n  // },\n});\n\nexport default Koban;","class MessagePipeline extends cc.EventTarget {\n  // constructor() {\n  //   super()\n  // }\n\n  sendMessage(detail, params) {\n    cc.log(`dispatch system notification ${detail}`)\n    this.emit(detail, params)\n  }\n}\n\nexport const messagePipeline = new MessagePipeline()\n","import {\n  messagePipeline\n} from 'MessagePipeline'\n\ncc.Class({\n  extends: cc.Component,\n\n  properties: {\n    nextLevel: 10\n  },\n\n  // use this for initialization\n  onLoad: function () {\n    this.currentSize = 1\n    this.currentLevel = 1\n    this.black = 0\n    messagePipeline.on('onReset', this._onReset, this)\n  },\n\n  // called every frame, uncomment this function to activate update callback\n  update: function (dt) {},\n\n  _onReset() {\n    this.currentSize = 1\n    this.currentLevel = 1\n    this.black = 0\n    let anim1 = this.scaling()\n    let anim2 = this.coloring()\n    this.node.runAction(cc.spawn(anim1, anim2))\n  },\n\n  eat(size) {\n    this.currentSize += size / 100\n    if (this.currentSize >= this.nextLevel) {\n      this.currentSize = 1\n      this.currentLevel += 1\n      this.black = Math.floor(this.black / 2)\n      messagePipeline.sendMessage('onBlacken', this.black)\n      let anim1 = this.scaling()\n      let anim2 = this.coloring()\n      this.node.runAction(cc.spawn(anim1, anim2))\n\n      messagePipeline.sendMessage('onLevelUp', this.currentLevel)\n      messagePipeline.sendMessage('SOUND_PLAY', 'levelup')\n    } else {\n      let anim = cc.scaleTo(0.1, this.currentSize)\n      this.node.runAction(anim)\n    }\n    messagePipeline.sendMessage('SOUND_PLAY', 'eat')\n  },\n\n  blacken() {\n    if (this.black < 100) {\n      this.black = Math.min(100, this.black + this.currentLevel)\n      messagePipeline.sendMessage('onBlacken', this.black)\n      if (this.black >= 100) {\n        messagePipeline.sendMessage('onGameOver', this.currentLevel)\n      }\n      let anim = this.coloring()\n      this.node.runAction(anim)\n    }\n  },\n\n  scaling() {\n    let anim = cc.scaleTo(0.1, this.currentSize)\n    return anim\n  },\n\n  coloring() {\n    let color = 2.25 * this.black\n    let anim = cc.tintTo(0.1, 255 - color, 255 - color, 255 - color)\n    return anim\n  }\n});","cc.Class({\n  extends: cc.Component,\n\n  properties: {\n    enabledDebugDraw: true,\n    enabledDrawBoundingBox: true\n  },\n\n  // use this for initialization\n  onLoad: function () {\n    cc.director.getPhysicsManager().enabled = true\n    let collisionManager = cc.director.getCollisionManager()\n    collisionManager.enabled = this.enabled\n    collisionManager.enabledDebugDraw = this.enabledDebugDraw\n    collisionManager.enabledDrawBoundingBox = this.enabledDrawBoundingBox\n  }\n\n  // called every frame, uncomment this function to activate update callback\n  // update: function (dt) {\n\n  // },\n})\n","export default class PrefabNodePool extends cc.NodePool{\n  constructor(prefab, capacity, increase, handler){\n    super(handler);\n    this._handler = handler;\n    this._prefab = prefab;\n    this._capacity = capacity;\n    this._increase = increase;\n    this._peak = 0;\n    this._toBePutBackToPool = [];\n  }\n\n  init(){\n    for (let i = 0; i < this._capacity; i++) {\n      let node = this._createNode();\n      super.put(node);   \n    }\n  }\n\n  _createNode(){\n    let node = cc.instantiate(this._prefab);\n    if (this._handler) {\n      let poolHandler = node.getComponent(this._handler);\n      if (poolHandler) {\n        poolHandler.setPool(this);      \n      }\n    }\n    return node;\n  }\n\n  get(param){\n    if (this.size() === 0) {\n      for (let i = 0; i < this._increase; i++) {\n        let node = this._createNode();\n        super.put(node);   \n      }\n      this._capacity += this._increase;\n    }\n    let instance = super.get(param);\n    this._peak = Math.max(this.countInUse, this._peak);\n    return instance;\n  }\n\n  put(node) {\n    super.put(node);\n    // this._toBePutBackToPool.push(node);\n  }\n\n  get countInUse(){\n    return this._capacity - this.size();\n  }\n\n  get countPeak(){\n    return this._peak; \n  }\n\n  update(){\n    // let length = this._toBePutBackToPool.length;\n    // if (this._toBePutBackToPool.length) {\n    //   let size = Math.min(10, length);\n    //   for (let i = 0; i < size; i++){\n    //     let node = this._toBePutBackToPool.pop();\n    //     super.put(node);\n    //   }\n    // }\n  }\n}","\nconst MAX_SIN = 100;\nconst MAX_GI = 100;\nconst MAX_TAI = 100;\n\nconst Singitai = cc.Class({\n  extends: cc.Component,\n\n  properties: {\n    gaugeSinFill: cc.Sprite,\n    gaugeGiFill: cc.Sprite,\n    gaugeTaiFill: cc.Sprite\n  },\n  \n  statics: {\n    instance: null,\n  },\n\n  // use this for initialization\n  onLoad: function () {\n    Singitai.instance = this;\n\n    this._sin = 100;\n    this._gi = 0;\n    this._tai = 100;\n  },\n\n  getSin() {\n    return this._sin;\n  },\n\n  getGi() {\n    return this._gi;\n  },\n  \n  getTai() {\n    return this._tai;\n  },\n\n  indecreaseSin(value) {\n    this._sin = Math.min(MAX_SIN, Math.max(0, this._sin + value));\n  },\n  \n  indecreaseGi(value) {\n    this._gi = Math.min(MAX_GI, Math.max(0, this._gi + value));\n  },\n  \n  indecreaseTai(value) {\n    this._tai = Math.min(MAX_TAI, Math.max(0, this._tai + value));\n  },\n\n  setSin(ratio) {\n    this.gaugeSinFill.fillRange = ratio;\n  },\n\n  // called every frame, uncomment this function to activate update callback\n  update: function (dt) {\n    // this.setGaugeFill(this.gaugeSinFill, this._sin, MAX_SIN);\n    this.setGaugeFill(this.gaugeGiFill, this._gi, MAX_GI);\n    this.setGaugeFill(this.gaugeTaiFill, this._tai, MAX_TAI);\n  },\n\n  setGaugeFill(gauge, value, max) {\n    let ratio = Math.min(1, Math.max(0, value / max));\n    gauge.fillRange = ratio;\n  }\n});\n\nexport default Singitai;","const StageCount = cc.Class({\n  extends: cc.Component,\n\n  properties: {\n    stageLabel: cc.Label\n  },\n  \n  statics: {\n    instance: null,\n  },\n\n  // use this for initialization\n  onLoad: function () {\n    StageCount.instance = this;\n  },\n\n  disp(value) {\n    this.stageLabel.string = value;\n  }\n\n  // called every frame, uncomment this function to activate update callback\n  // update: function (dt) {\n\n  // },\n});\n\nexport default StageCount;","cc.Class({\n  extends: cc.Component,\n\n  properties: {\n    zIndex: 0\n  },\n\n  // use this for initialization\n  onLoad: function () {\n    this.node.zIndex = this.zIndex;\n  },\n\n  // called every frame, uncomment this function to activate update callback\n  // update: function (dt) {\n\n  // },\n});\n","cc.Class({\n  extends: cc.Component,\n\n  properties: {\n    zanCount: cc.Label,\n    anim: cc.Animation\n  },\n\n  // use this for initialization\n  onLoad: function () {\n    this.anim.on('finished', this._finished, this);\n  },\n\n  reuse(count) {\n    this.zanCount.string = count;\n    this.anim.play();\n  },\n\n  _finished() {\n    this._backToPool();\n  },\n\n  setPool(pool) {\n    this._pool = pool;\n  },\n\n  _backToPool(){\n    if (this._pool) {\n      this._pool.put(this.node);\n    }\n  }\n\n  // called every frame, uncomment this function to activate update callback\n  // update: function (dt) {\n\n  // },\n});\n"],"sourceRoot":"/source/","file":"project.js"}